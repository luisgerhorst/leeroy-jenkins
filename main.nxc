

/************/
/* Sensoren */
/************/

// Immer diese Variablennamen statt IN_1 oder ähnlichem verwenden.

int lightSensorCenter = IN_2;

int lightSensorLeft = IN_1;
int lightSensorRight = IN_3;

int touchSensor = IN_4;

void setUpSensors() {
    SetSensorLight(lightSensorCenter);
    SetSensorLight(lightSensorLeft);
    SetSensorLight(lightSensorRight);
    SetSensorTouch(touchSensor);
}

/***********/
/* Motoren */
/***********/

// Immer diese Variablennamen statt OUT_A oder ähnlichem verwenden.

int motorsLeftRight = OUT_AC;
int motorRight = OUT_C;
int motorLeft = OUT_A;

int motorHand = OUT_B;

/*****************/
/* Lichtsensoren */
/*****************/

// Gibt die Grenze zwischen dem, was als weiß und dem was als schwarz
// interpretiert wird an:
int blackWhiteAverage = 0;

bool isWhite(int color) {
    return color > blackWhiteAverage;
}

bool isBlack(int color) {
    return color < blackWhiteAverage;
}

bool sensorIsWhite(int sensor) {
    return isWhite(Sensor(sensor));
}

bool sensorIsBlack(int sensor) {
    return isBlack(Sensor(sensor));
}

void calibrateLightSensors(int blackSensor, int whiteSensor) {
    int black = Sensor(blackSensor);
    int white = Sensor(whiteSensor);
    blackWhiteAverage = (black + white) / 2;

    // Berechnete Werte anzeigen und kurz warten.
    /* NumOut(0, LCD_LINE1, black); */
    /* NumOut(0, LCD_LINE2, white); */
    /* NumOut(0, LCD_LINE3, blackWhiteAverage); */
    Wait(1*1000);
}

/***********/
/* Greifer */
/***********/

#define GRAB_DEGREES 11*360

void grab() {
    /*
      Startposition: Zahnräder ans äußere Limit, dann drehen bis Stecker
      an Kurbel nach oben und dann nochmal eine Umdrehung.
    */
    RotateMotor(motorHand, 100, -GRAB_DEGREES);
}

void release() {
    /*
      Startposition: Stecker an Kurbel nach oben.
    */
    RotateMotor(motorHand, 100, GRAB_DEGREES);
}

/**********/
/* Fahren */
/**********/

// Achtung: Motoren sind falsch rum angebracht, OnFwd bewegt den Roboter
// eventuell rückwärts. Deswegen am besten die folgenden Funktionen
// verwenden um sich zu bewegen.

float slower = 1;

void driveForwards(char speed) {
    OnFwd(motorsLeftRight, slower*speed);
}

void driveBackwards(char speed) {
    OnRev(motorsLeftRight, slower*speed);
}

// Gibt an wie stark er sich drehen soll, muss angepasst werden je
// nachdem wie weit die Sensoren vom Drehpunkt entfernt sind. Ist der
// Wert 1, so dreht er sich auf der Stelle (eine Kette in die eine
// Richtung, die andere in die entgegengesetzte), ist der Wert 0 so wird
// beim Linksdrehen z.B. nur die Rechte Kette in Fahrtrichtung bewegt.
float turnRatio = 6.5/10;

void driveLeft(char speed) {
    OnRev(motorLeft, slower*speed*turnRatio);
    OnFwd(motorRight, slower*speed);
}

void driveRight(char speed) {
    OnFwd(motorLeft, slower*speed);
    OnRev(motorRight, slower*speed*turnRatio);
}

void driveLeftBackwards(char speed) {
    OnFwd(motorLeft, slower*speed*turnRatio);
    OnRev(motorRight, slower*speed);
}

void driveRightBackwards(char speed) {
    OnRev(motorLeft, slower*speed);
    OnFwd(motorRight, slower*speed*turnRatio);
}

void turnRight(char speed) {
    OnFwd(motorLeft, slower*speed);
    OnRev(motorRight, slower*speed);
}

void turnLeft(char speed) {
    OnRev(motorLeft, slower*speed);
    OnFwd(motorRight, slower*speed);
}

void stopDriving() {
    driveForwards(0);
}

void switchDirection() {

    turnRight(100);

    int leavingState = 0,
        leftState = 1,
        doneState = 2;
    int state = leavingState;

    int allWhiteAcc = 0,
        centerBlackAcc = 0;

    while (state != doneState) {

        // Read data:

        bool
            leftIsBlack = sensorIsBlack(lightSensorLeft),
            rightIsBlack = sensorIsBlack(lightSensorRight),
            centerIsBlack = sensorIsBlack(lightSensorCenter),
            leftIsWhite = !leftIsBlack,
            rightIsWhite = !rightIsBlack,
            centerIsWhite = !centerIsBlack;

        if (leftIsWhite && rightIsWhite && centerIsWhite) {
            allWhiteAcc++;
            centerBlackAcc = 0;
        }

        if (centerIsBlack) {
            allWhiteAcc = 0;
            centerBlackAcc++;
        }

        // Check if milestone achieved:

        if (state == leavingState && allWhiteAcc > 5) {
            state = leftState;
        }

        if (state == leftState && centerBlackAcc > 5) {
            state = doneState;
        }

    }

    stopDriving();

}

/***********/
/* Actions */
/***********/

byte performInverse(byte action) {
    if (action == 1) driveBackwards(100);
    if (action == 2) driveLeftBackwards(100);
    if (action == 3) driveRightBackwards(100);
}

byte drive() {

    bool
        leftIsBlack = sensorIsBlack(lightSensorLeft),
        rightIsBlack = sensorIsBlack(lightSensorRight),
        centerIsBlack = sensorIsBlack(lightSensorCenter),
        leftIsWhite = !leftIsBlack,
        rightIsWhite = !rightIsBlack,
        centerIsWhite = !centerIsBlack;

    if (leftIsWhite && centerIsBlack && rightIsWhite ||
        leftIsWhite && centerIsWhite && rightIsWhite) {
        driveForwards(100);
        return 1;
    }

    if (leftIsBlack && rightIsWhite) {
        driveLeft(100);
        return 2;
    }

    if (leftIsWhite && rightIsBlack) {
        driveRight(100);
        return 3;
    }

}

/***********/
/* Undoing */
/***********/

struct instruction {
    // 0 if no action, 1 to 255 for actions.
    byte action;
    // First stores start tick, after instruction ends stores time the
    // instruction was active.
    long time;
};

instruction instructions[512];
int currentInstruction = 0;

int nextInstruction(int current) {
    int next = current + 1;
    if (next >= ArrayLen(instructions)) next = 0;
    return next;
}

int previousInstruction(int current) {
    int next = current;
    if (current == 0) next = ArrayLen(instructions);
    return next - 1;
}

void endInstruction() {
    // Only end it if there is one. Prevents gaps in instructions array
    // after undoing.
    if (instructions[currentInstruction].action > 0) {
        instructions[currentInstruction].time = CurrentTick() - instructions[currentInstruction].time;
        currentInstruction = nextInstruction(currentInstruction);
    }
}

void saveInstruction(byte action) {
    if (instructions[currentInstruction].action != action) {
        endInstruction();
        instructions[currentInstruction].action = action;
        instructions[currentInstruction].time = CurrentTick();
    }
}

void undo(long toUndo) {


    long undoStart = CurrentTick();
    long undone = 0;

    while (undone < toUndo &&
           instructions[previousInstruction(currentInstruction)].action > 0) {

        NumOut(0, LCD_LINE2, undone);

        // Next perform inverse of previous instruction.
        currentInstruction = previousInstruction(currentInstruction);

        NumOut(0, LCD_LINE5, currentInstruction);

        long actionStart = CurrentTick();
        long actionDone = 0;
        performInverse(instructions[currentInstruction].action);

        NumOut(0, LCD_LINE4, instructions[currentInstruction].time);

        // Wait until instruction or inverse period ends.
        while ((undone + actionDone) < toUndo &&
               actionDone < instructions[currentInstruction].time) {
            actionDone = CurrentTick() - actionStart;
            NumOut(0, LCD_LINE3, actionDone);
        }

        undone = undone + actionDone;
        stopDriving();

        // Delete performed instruction to prevent cylcing throug
        // instrcutions array. If there is timeLeft for this instruction
        // update it's time attribute.
        int timeLeft = instructions[currentInstruction].time - actionDone;
        if (timeLeft > 0) {
            instructions[currentInstruction].time = timeLeft;
        } else {
            instructions[currentInstruction].action = 0;
            instructions[currentInstruction].time = 0;
        }

    }

    // Jump to next instruction if current one was aborted due to toUndo
    // limit.
    if (instructions[currentInstruction].action > 1) {
        currentInstruction = nextInstruction(currentInstruction);
    }

}

/******************************/
/* Beginn des Programmablaufs */
/******************************/

task main () {

    setUpSensors();
    // Mittlerer Lichtsensor muss am Anfang auf schwarz sein, der linke
    // weiß.
    calibrateLightSensors(lightSensorCenter, lightSensorLeft);

    // Start

    /* Program States */
    int initialState = 0;
    int grabbedBallState = 1;
    int reversedState = 2;
    int releasedBallState = 3;
    int state = 0;

    int loopCount = initialState;

    // Event Loop: Am besten immer nur einzelene Bedingungen (if) und die
    // Reaktionen (drive, grab, ...) die sie erzeugen einbauen und die Schleife
    // nicht mit Wait oder ähnlichem blockieren.
    while (true) {

        // Zeigt an wie oft die Schleife durchlaufen wurde bzw. lässt erkennen
        // wenn sie blockiert ist.
        loopCount++;
        NumOut(0, LCD_LINE1, loopCount);

        bool touchSensorActive = Sensor(touchSensor);

        // Entscheiden was getan werden soll:

        if (touchSensorActive && state == initialState) {
            stopDriving();
            endInstruction();

            grab();
            state = grabbedBallState;

            continue;
        }

        if (state == grabbedBallState) {

            undo(2000);
            switchDirection();

            state = reversedState;
            continue;
        }

        if (touchSensorActive && state == reversedState) {
            stopDriving();
            endInstruction();

            release();
            state = releasedBallState;

            continue;
        }

        if (!touchSensorActive && (state == initialState || state == reversedState)) {
            byte action = drive();
            saveInstruction(action);
            continue;
        }

    }
}
