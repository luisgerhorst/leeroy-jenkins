// Sensors

int lightSensorOuterLeft = IN_2;

int lightSensorLeft = IN_1;
int lightSensorRight = IN_3;

int touchSensor = IN_4;

void setUpSensors() {
    SetSensorLight(lightSensorOuterLeft);
    SetSensorLight(lightSensorLeft);
    SetSensorLight(lightSensorRight);
    SetSensorTouch(touchSensor);
}

// Motors
int motorsLeftRight = OUT_AC;
int motorRight = OUT_C;
int motorLeft = OUT_A;

int motorHand = OUT_B;

// Light Sensors

int blackWhiteAverage = 0;

bool isWhite(int sensor) {
    return Sensor(sensor) > blackWhiteAverage;
}

bool isBlack(int sensor) {
    return Sensor(sensor) < blackWhiteAverage;
}

void calibrateLightSensors(int blackSensor, int whiteSensor) {
    int black = Sensor(blackSensor);
    int white = Sensor(whiteSensor);
    blackWhiteAverage = (black + white) / 2;

    // Show calculated values.
    NumOut(0, LCD_LINE1, black);
    NumOut(0, LCD_LINE2, white);
    NumOut(0, LCD_LINE3, blackWhiteAverage);
    Wait(2*1000);
}

// Hand

#define GRAB_DEGREES 6*360+180

void grab() {
    /*
      Startposition: Graue Markierung an Kurbel nach oben, schwarze
      Markierung and Zahnrädern direkt vor Limit.
    */
    RotateMotor(motorHand, 100, -GRAB_DEGREES);
}

void release() {
    /*
      Startposition: Graue Markierung an Kurbel nach oben, Zahnräder
      ca. eine Umdrehung vor Limit.
    */
    RotateMotor(motorHand, 100, GRAB_DEGREES);
}

// Driving

void drive(int speed) {
    OnRev(motorsLeftRight, speed);
}

void driveBack(int speed) {
    OnFwd(motorsLeftRight, speed);
}

void driveLeft(int speed) {
    Off(motorLeft);
    OnRev(motorRight, speed);
}

void driveRight(int speed) {
    OnRev(motorLeft, speed);
    Off(motorRight);
}

void turnRight(int speed) {
    OnRev(motorLeft, speed);
    OnFwd(motorRight, speed);
}

void turnLeft(int speed) {
    OnFwd(motorLeft, speed);
    OnRev(motorRight, speed);
}

// Other

enum Turn { left, right, none };

// Program Flow

task main () {

    setUpSensors();
    calibrateLightSensors(lightSensorLeft, lightSensorOuterLeft);

    // Start
    drive(100);

    while (true) {

        if (isBlack(lightSensorLeft) && isBlack(lightSensorRight)) {
            drive(100);
        }

        else if (isWhite(lightSensorLeft) && isBlack(lightSensorRight)) {
            driveRight(100);
        }

        else if (isBlack(lightSensorLeft) && isWhite(lightSensorRight)) {
            driveLeft(100);
        }

        else if (isWhite(lightSensorLeft) && isWhite(lightSensorRight)) {

            int turn90DegDuration = 500;
            
            // Links nach linie suchen.
            turnLeft(100);
            int msTurnedLeft = 0;
            while (msTurnedLeft < turn90DegDuration && isWhite(lightSensorLeft)) {
                msTurnedLeft += 2;
                Wait(2);
            }

            // Rechts nach linie suchen.
            drive(100);
            Wait(100);
            turnRight(100);
            int msTurnedRight = 0;
            while (msTurnedRight < 2*turn90DegDuration && isWhite(lightSensorLeft)) {
                msTurnedRight += 2;
                Wait(2);
            }

        }
            

    }
}
